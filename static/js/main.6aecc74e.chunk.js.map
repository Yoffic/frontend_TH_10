{"version":3,"sources":["components/Image.js","components/NoResults.js","components/ImageList.js","components/Gallery.js","config.js","components/Navigation.js","components/Header.js","components/NotFound.js","App.js","registerServiceWorker.js","index.js"],"names":["Image","props","src","url","alt","NoResults","className","ImageList","images","results","length","map","image","farm","server","id","secret","key","Gallery","state","loading","axios","get","this","keyword","then","response","setState","data","photos","photo","catch","error","console","log","Component","Navigation","NavLink","to","Header","handleSubmit","e","preventDefault","inputKeyword","value","path","history","push","onSubmit","type","name","placeholder","required","ref","input","fill","height","viewBox","width","xmlns","d","NotFound","App","basename","forceRefresh","Route","component","Switch","exact","render","match","params","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8RAUeA,EARD,SAACC,GACb,OACE,4BACE,yBAAKC,IAAKD,EAAME,IAAKC,IAAI,OCMhBC,EATG,WAChB,OACE,wBAAIC,UAAU,aACZ,gDACA,0FCkBSC,EApBG,SAACN,GACjB,IACIO,EADEC,EAAUR,EAAMO,OAYtB,OATIA,EADAC,EAAQC,OAAS,EACRD,EAAQE,KAAI,SAAAC,GAAK,OACvB,kBAAC,EAAD,CACGT,IAAG,sBAAiBS,EAAMC,KAAvB,6BAAgDD,EAAME,OAAtD,YAAgEF,EAAMG,GAAtE,YAA4EH,EAAMI,OAAlF,QACHC,IAAKL,EAAMG,QAGR,kBAAC,EAAD,MAIX,4BACGP,ICdcU,E,2MACnBC,MAAQ,CACNX,OAAQ,GACRY,SAAS,G,mFAGU,IAAD,OAClBC,IACGC,IADH,oFCZW,mCDYX,iBACmGC,KAAKtB,MAAMuB,QAD9G,2EAEGC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZnB,OAAQkB,EAASE,KAAKC,OAAOC,MAC7BV,SAAS,OAGZW,OAAM,SAAAC,GACLC,QAAQC,IAAI,kCAAmCF,Q,+BAKnD,OAAIT,KAAKJ,MAAMC,QAEX,0CAKF,yBAAKd,UAAU,mBACb,4BAAKiB,KAAKtB,MAAMuB,QAAhB,YACA,kBAAC,EAAD,CAAWhB,OAAQe,KAAKJ,MAAMX,c,GA9BD2B,a,QEUtBC,EAZI,WACjB,OACE,yBAAK9B,UAAU,YACb,4BACE,4BAAI,kBAAC+B,EAAA,EAAD,CAASC,GAAG,SAAZ,SACJ,4BAAI,kBAACD,EAAA,EAAD,CAASC,GAAG,SAAZ,SACJ,4BAAI,kBAACD,EAAA,EAAD,CAASC,GAAG,UAAZ,aCsBGC,E,2MA1BfC,aAAe,SAACC,GACdA,EAAEC,iBACF,IAAIC,EAAe,EAAKnB,QAAQoB,MAC5BC,EAAI,WAAOF,GAEf,EAAK1C,MAAM6C,QAAQC,KAAKF,I,wEAGhB,IAAD,OACL,OACE,6BACI,0BAAMvC,UAAU,cAAc0C,SAAUzB,KAAKiB,cAC3C,2BAAOS,KAAK,SAASC,KAAK,SAASC,YAAY,SAASC,UAAQ,EAACC,IAAM,SAACC,GAAD,OAAW,EAAK9B,QAAU8B,KACjG,4BAAQL,KAAK,SAAS3C,UAAU,iBAC9B,yBAAKiD,KAAK,OAAOC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BAChE,0BAAMC,EAAE,+OACR,0BAAMA,EAAE,gBAAgBL,KAAK,YAInC,kBAAC,EAAD,W,GAtBWpB,aCON0B,EARE,WACf,OACE,6BACE,gDCsBSC,EAfH,WACV,OACE,kBAAC,IAAD,CAAQC,SAAS,kBAAkBC,cAAc,GAC/C,yBAAK1D,UAAU,aACb,kBAAC2D,EAAA,EAAD,CAAOpB,KAAK,IAAIqB,UAAW3B,IAC3B,kBAAC4B,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,CAAOG,OAAK,EAACvB,KAAK,IAAIwB,OAAQ,kBAAM,kBAAC,EAAD,CAAS7C,QAAQ,cACrD,kBAACyC,EAAA,EAAD,CAAOpB,KAAK,YAAYwB,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,kBAAC,EAAD,CAAS9C,QAAS8C,EAAMC,OAAO/C,aAC9E,kBAACyC,EAAA,EAAD,CAAOC,UAAWL,QCVtBW,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,2DAsCN,SAASO,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTrD,MAAK,SAAAyD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjE,QACf4D,UAAUC,cAAcO,WAK1BtD,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBH,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MCzEjEwD,IAASnB,OAAO,kBAAC,EAAD,MAASoB,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBX,UAAW,CAGzE,GADkB,IAAIY,IAAIC,kBAAwBlB,OAAOC,UAC3CkB,SAAWnB,OAAOC,SAASkB,OAIvC,OAGFnB,OAAOoB,iBAAiB,QAAQ,WAC9B,IAAMhB,EAAK,UAAMc,kBAAN,sBAEPpB,IAiDV,SAAiCM,GAE/BiB,MAAMjB,GACHrD,MAAK,SAAAC,GAGkB,MAApBA,EAASsE,SACuD,IAAhEtE,EAASuE,QAAQ3E,IAAI,gBAAgB4E,QAAQ,cAG7CnB,UAAUC,cAAcmB,MAAM1E,MAAK,SAAAyD,GACjCA,EAAakB,aAAa3E,MAAK,WAC7BiD,OAAOC,SAAS0B,eAKpBxB,EAAgBC,MAGnB/C,OAAM,WACLE,QAAQC,IACN,oEArEAoE,CAAwBxB,GAIxBC,UAAUC,cAAcmB,MAAM1E,MAAK,WACjCQ,QAAQC,IACN,gHAMJ2C,EAAgBC,OCzCxByB,K","file":"static/js/main.6aecc74e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Image = (props) => {\n  return (\n    <li>\n      <img src={props.url} alt=\"\" />\n    </li>\n  )\n}\n\nexport default Image;\n","import React from 'react';\n\nconst NoResults = () => {\n  return (\n    <li className=\"not-found\">\n      <h3>No results found</h3>\n      <p>That search did not return any results, please try again.</p>\n    </li>\n  )\n}\n\nexport default NoResults;\n","import React from 'react';\nimport Image from './Image';\nimport NoResults from './NoResults';\n\nconst ImageList = (props) => {\n  const results = props.images;\n  let images;\n  if (results.length > 0) {\n      images = results.map(image =>\n         <Image\n            url={`https://farm${image.farm}.staticflickr.com/${image.server}/${image.id}_${image.secret}.jpg`}\n            key={image.id} />\n        );\n  } else {\n      images = <NoResults />;\n  }\n\n  return(\n    <ul>\n      {images}\n    </ul>\n  )\n}\n\nexport default ImageList;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport apiKey from '../config';\nimport ImageList from './ImageList';\n\nexport default class Gallery extends Component {\n  state = {\n    images: [],\n    loading: true\n  };\n\n  componentDidMount() {\n    axios\n      .get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${this.props.keyword}&safe_search=1&content_type=1&per_page=12&format=json&nojsoncallback=1`)\n      .then(response => {\n        this.setState({\n          images: response.data.photos.photo,\n          loading: false\n        });\n      })\n      .catch(error => {\n        console.log('Error fetching and parsing data', error);\n      });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <h2>Loading...</h2>\n        );\n    }\n\n    return (\n      <div className=\"photo-container\">\n        <h2>{this.props.keyword} results</h2>\n        <ImageList images={this.state.images}/>\n      </div>\n    );\n  }\n}\n","const apiKey = 'ccd3cbb40da951e1616089af7074f2b1';\nexport default apiKey;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navigation = () => {\n  return (\n    <nav className=\"main-nav\">\n      <ul>\n        <li><NavLink to=\"/cats\">Cats</NavLink></li>\n        <li><NavLink to=\"/dogs\">Dogs</NavLink></li>\n        <li><NavLink to=\"/birds\">Birds</NavLink></li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport Navigation from './Navigation';\n\nclass Header extends Component {\n\nhandleSubmit = (e) => {\n  e.preventDefault();\n  let inputKeyword = this.keyword.value;\n  let path = `/${inputKeyword}`;\n  // add path to the URL\n  this.props.history.push(path);\n}\n\nrender() {\n    return (\n      <div>\n          <form className=\"search-form\" onSubmit={this.handleSubmit}>\n            <input type=\"search\" name=\"search\" placeholder=\"Search\" required ref={ (input) => this.keyword = input } />\n            <button type=\"submit\" className=\"search-button\">\n              <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n                <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n              </svg>\n            </button>\n          </form>\n          <Navigation />\n        </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\n\nconst NotFound = () => {\n  return (\n    <div>\n      <h2>Page Not Found</h2>\n    </div>\n  )\n}\n\nexport default NotFound;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\n\nimport Gallery from './components/Gallery';\nimport Header from './components/Header';\nimport NotFound from './components/NotFound';\n\n\nconst App = () => {\n  return (\n    <Router basename=\"/frontend_TH_10\" forceRefresh={true}>\n      <div className=\"container\">\n        <Route path='/' component={Header} />\n        <Switch>\n          <Route exact path=\"/\" render={() => <Gallery keyword='Sunset' />} />\n          <Route path=\"/:keyword\" render={({ match }) => <Gallery keyword={match.params.keyword} />} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}